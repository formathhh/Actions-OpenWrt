name: Build ath79-16m2025

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      repo_url:
        description: 'REPO URL'
        required: true
        default: 'https://github.com/openwrt/openwrt'
      repo_branch:
        description: 'REPO BRANCH'
        required: true
        default: 'v24.10.0'
      patch_version:
        description: 'PATCH VERSION'
        required: true
        default: 'v24.10.0'
      config_file:
        description: 'CONFIG FILE'
        required: true
        default: 'ath79-16m.config'
      p1_sh:
        description: 'DIY P1 SH (OR PATCH SH)'
        required: true
        default: 'diy-patcham.sh'
      p2_sh:
        description: 'DIY P2 SH'
        required: true
        default: 'diy-part2.sh'

env:
  REPO_URL: ${{ inputs.repo_url }}
  REPO_BRANCH: ${{ inputs.repo_branch }}
  PATCH_VERSION: ${{ inputs.patch_version }}
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ${{ inputs.config_file }}
  DIY_P1_SH: ${{ inputs.p1_sh }}
  DIY_P2_SH: ${{ inputs.p2_sh }}
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_WSS: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev patchutils img2simg mkbootimg
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          [ -e build-files ] && mv build-files openwrt/build-files
          chmod +x $DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH ${{ env.PATCH_VERSION }}
      - name: Update feeds
        run: cd openwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd openwrt && ./scripts/feeds install -a

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files openwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          chmod +x $DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH ${{ env.PATCH_VERSION }}
      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download package
        id: package
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
      - name: Compile the firmware
        id: compile
        run: |
          cd openwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DEVICE_NAME=_NEW" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
      - name: Check space usage and targz
        if: (!cancelled())
        run: |
          df -hT
          cd openwrt
          tree bin
          tar -czf bin.tar.gz bin
          tar -czf dl.tar.gz dl
          tar -czf build_dir.tar.gz build_dir
          tar -czf staging_dir.tar.gz staging_dir
      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/bin.tar.gz

      - name: Upload dl directory
        uses: actions/upload-artifact@main
        if: env.UPLOAD_BIN_DIR == 'true' && !cancelled()
        with:
          name: OpenWrt_dl${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/dl.tar.gz

      - name: Upload build_dir directory
        uses: actions/upload-artifact@main
        if: env.UPLOAD_BIN_DIR == 'true' && !cancelled()
        with:
          name: OpenWrt_build_dir${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/build_dir.tar.gz

      - name: Upload staging_dir directory
        uses: actions/upload-artifact@main
        if: env.UPLOAD_BIN_DIR == 'true' && !cancelled()
        with:
          name: OpenWrt_staging_dir${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: openwrt/staging_dir.tar.gz

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          tar -czf targets_packages.tar.gz packages
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Upload firmware to Wenshushu
        id: wenshushu
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WSS == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wss -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wenshushu.log
          echo "::warning file=wenshushu.com::$(cat wenshushu.log | grep https)"
          echo "::set-output name=url::$(cat wenshushu.log | grep Download | grep https | cut -f3 -d" ")"
      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_WSS = true ] && echo "ðŸ”— [Wenshushu](${{ steps.wenshushu.outputs.url }})" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*
